<!DOCTYPE HTML>

<html>
  <head>
    <title>RCool</title>
    <style>
      html,
      body {
        height: 100%;
        width: 100%;
        margin: 0;
        overflow-y: hidden;
      }

      button:focus {
        outline: none;
      }

      .box {
        height: 100%;
        width: 100%;
        display: inline-block;
      }

      #camera-panel {
        height: 90%;
        width: auto;
        display: inline-block;
        float: left;
        margin: 2%;
      }

      #camera {
        height: 100%;
        border: 1px solid black;
      }

      #control-panel {
        width: 20%;
        height: 95%;
        margin: 2%;
        display: inline-block;
        float: left;
      }

      .full-width {
        width: 100%;
        display: inline-block;
      }

      #mode-panel {
        height: 5%;
        margin-top: 5%;
      }

      .mode-button {
        height: 100%;
        float: left;
        width: 33.333%;
        font-size: 1.3em;
      }

      .mode-button-selected {
        background-color: grey;
      }

      #status-panel {
        height: 10%;
        margin-top: 5%;
        border: 1px solid black;
      }

      #status {
        height: 91%;
        width: 95%;
        font-size: 1.5em;
        padding: 1% 1% 1% 3%;
        resize: none;
        border: none;
        overflow: auto;
        outline: none;
      }

      #status:focus {
        outline: none;
      }

      #folder-panel {
        height: 5%;
        margin-top: 15%;
      }

      #folder {
        height: 98%;
        width: 95%;
        font-size: 1.5em;
        padding: 1% 1% 1% 3%;
      }

      #start-stop-panel {
        height: 10%;
        margin-top: 10%;
      }

      #start-stop-button {
        height: 100%;
        width: 100%;
        font-size: 2em;
      }

      #keyboard-panel {
        width: 100%;
        margin-top: 30%;
        position: relative;
      }

      #keyboard-panel:before {
        content: '';
        display: block;
        padding-top: 66.667%;
      }

      .key {
        width: 26%;
        margin: 3.667%;
        padding: 5%;
        position: absolute;
      }

      .key:before{
        content: '';
        display: block;
        padding-top: 100%;
      }

      #key-forward {
        left: 33.333%;
        top: 0;
      }
      #key-left {
        left: 0;
        top: 50%;
      }
      #key-back {
        left: 33.333%;
        top: 50%;
      }
      #key-right {
        left: 66.666%;
        top: 50%;
      }

      .key-content {
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        font-size: 4vw;
      }

    </style>
  </head>

  <body>
    <div class='box'>
      <div id='camera-panel'>
        <img id='camera' alt='Cannot connect to camera websocket. Make sure it is running and refresh the page.'></img>
      </div>
      <div id='control-panel'>
        <div id='mode-panel' class='full-width'>
          <button id='manual-mode' class='mode-button'>Manual</button>
          <button id='train-mode' class='mode-button'>Train</button>
          <button id='auto-mode' class='mode-button'>Auto</button>
        </div>

        <div id='status-panel'>
          <textarea id='status' class='full-width' placeholder='Status will be displayed here' readonly></textarea>
        </div>

        <div id='folder-panel'>
          <input id='folder' class='full-width' placeholder='Folder name to save your files'></input>
        </div>

        <div id='start-stop-panel'>
          <button id='start-stop-button'>Start</button>
        </div>

        <div id='keyboard-panel'>
          <button id='key-forward' class='key'><div class='key-content'>⇧</div></button>
          <button id='key-left' class='key'><div class='key-content'>⇦</div></button>
          <button id='key-back' class='key'><div class='key-content'>⇩</div></button>
          <button id='key-right' class='key'><div class='key-content'>⇨</div></button>
        </div>
      </div>
    </div>
  </body>

  <!-- URL -->
  <script type='text/javascript'>
    const url = '<%= url %>'
  </script>

  <!-- WEBSOCKET CAMERA -->
  <script type='text/javascript'>
    const wsCamera = new WebSocket(`ws://${url}:4201`)
    wsCamera.onmessage = (base64image) => {
      document.getElementById('camera').src = 'data:image/png;base64,' + base64image.data
    }
  </script>

  <!-- WEBSOCKET CONTROL -->
  <script type='text/javascript'>
    const wsControl = new WebSocket(`ws://${url}:4202`)

    const changeStatus = (message) => document.getElementById('status').innerHTML = message

    wsControl.onmessage = (message) => changeStatus(message.data)
    wsControl.onclose = () => changeStatus('Cannot connect to control websocket. Make sure it is running and refresh the page.')
    wsControl.onerror = (error) => changeStatus(error.data)
  </script>

  <!-- MODE -->
  <script type='text/javascript'>
    var currentMode = null

    function changeOnclickMode(clickable) {
      var modeButtons = document.getElementsByClassName('mode-button')
      for (var i = 0; i < modeButtons.length; i++) {
        if (clickable) {
          modeButtons[i].onclick = ((name) => (() => changeMode(name)))(modeButtons[i].id)
        } else {
          modeButtons[i].onclick = null
        }
      }
    }

    function changeMode(modeButton) {
      currentMode = modeButton
      changeStatus('')
      var modeButtons = document.getElementsByClassName('mode-button')
      for (var i = 0; i < modeButtons.length; i++) {
        if (modeButtons[i].id == modeButton) {
          modeButtons[i].classList.add('mode-button-selected')
          switch(modeButton) {
            case 'manual-mode':
              document.getElementById('folder-panel').style.visibility = 'hidden'
              document.getElementById('start-stop-panel').style.visibility = 'hidden'
              break
            case 'train-mode':
              document.getElementById('folder-panel').style.visibility = 'visible'
              document.getElementById('start-stop-panel').style.visibility = 'visible'
              changeTrainMode(false)
              break
            case 'auto-mode':
              document.getElementById('folder-panel').style.visibility = 'visible'
              document.getElementById('start-stop-panel').style.visibility = 'visible'
              changeAutoMode(false)
              break
            default:
              break
          }
        } else {
          modeButtons[i].classList.remove('mode-button-selected')
        }
      }
      if (wsControl.readyState != 1 && wsControl.readyState != 0) {
        console.log(wsControl)
        changeStatus('Cannot connect to control websocket. Make sure it is running and refresh the page.')
      }
    }

    changeOnclickMode(true)
    changeMode('manual-mode')
  </script>

  <!-- START/STOP -->
  <script type='text/javascript'>
    var recordImages = false
    var autoStarted = false
    var folderName = null

    function changeTrainMode(on) {
      if (currentMode == 'train-mode') {
        changeStatus('')
        var buttonStartStop = document.getElementById('start-stop-button')
        var folderInput = document.getElementById('folder')
        if (on) {
          folderName = folderInput.value
          if (!folderName) {
            changeStatus('Folder name can\'t be blank')
            return
          }
          buttonStartStop.innerHTML = 'Stop'
          wsControl.send(JSON.stringify({ folderName }))
          buttonStartStop.onclick = () => changeTrainMode(false)
        } else {
          folderName = null
          buttonStartStop.innerHTML = 'Start'
          buttonStartStop.onclick = () => changeTrainMode(true)
        }
        recordImages = on
        changeOnclickMode(!on)
        folderInput.readOnly = on
      }
    }


    function changeAutoMode(on) {
      if (currentMode == 'auto-mode') {
        changeStatus('')
        var buttonStartStop = document.getElementById('start-stop-button')
        var folderInput = document.getElementById('folder')
        if (autoStarted != on) {
          if (on && folderInput.value) {
            wsControl.send(JSON.stringify({ auto: on, folderName: folderInput.value}))
          } else {
            wsControl.send(JSON.stringify({ auto: on }))            
          }
        }
        autoStarted = on
        if (on) {
          folderName = folderInput.value
          if (folderName) {
            recordImages = true
            changeStatus('Running self-driving mode with saving images')
          } else {
            changeStatus('Running self-driving mode without saving images')
          }
          buttonStartStop.innerHTML = 'Stop'
          buttonStartStop.onclick = () => changeAutoMode(false)
        } else {
          folderName = null
          recordImages = false
          buttonStartStop.innerHTML = 'Start'
          buttonStartStop.onclick = () => changeAutoMode(true)
        }
        changeOnclickMode(!on)
        folderInput.readOnly = on
      }
    }
  </script>

  <!-- KEYS -->
  <script type='text/javascript'>

  function pressKey(direction) {
    if (wsControl.readyState == 1) {
      if (recordImages) {
        wsControl.send(JSON.stringify({ direction, folderName }))
      } else {
        wsControl.send(JSON.stringify({ direction }))
      }
      if (autoStarted) {
        changeAutoMode(false)
      }
    } else {
      changeStatus('Cannot connect to control websocket. Make sure it is running and refresh the page.')
    }
  }

  var keyButtons = document.getElementsByClassName('key')
  for (var i = 0; i < keyButtons.length; i++) {
    keyButtons[i].onclick = ((direction) => (() => pressKey(direction)))(keyButtons[i].id.substring(4))
  }


  </script>
</html>
